<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <link rel="stylesheet" href="/style/canvas_style.css" />
  <title>그림판 + 드래그 텍스트 통합</title>
</head>
<body>
  <div id="controls">
    색상: <input type="color" id="colorPicker" value="#000000">
    선굵기: <input type="range" id="lineWidth" min="1" max="20" value="2">
    <button onclick="setMode('draw')">그리기</button>
    <button onclick="setMode('text')">텍스트</button>
    <button onclick="saveTextToCanvas()">텍스트 고정</button>
    <button onclick="clearCanvas()">초기화</button>
  </div>

  <div id="canvasWrapper">
    <canvas id="canvas" width="800" height="500"></canvas>
  </div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const wrapper = document.getElementById("canvasWrapper");
    let drawing = false;
    let mode = "draw";

    // 기본 설정
    ctx.lineCap = "round";

    // 그리기 모드
    canvas.addEventListener("mousedown", (e) => {
      if (mode === "draw") {
        drawing = true;
        ctx.beginPath();
        ctx.moveTo(e.offsetX, e.offsetY);
      } else if (mode === "text") {
        createTextBox(e.offsetX, e.offsetY);
      }
    });

    canvas.addEventListener("mousemove", (e) => {
      if (drawing && mode === "draw") {
        ctx.strokeStyle = document.getElementById("colorPicker").value;
        ctx.lineWidth = document.getElementById("lineWidth").value;
        ctx.lineTo(e.offsetX, e.offsetY);
        ctx.stroke();
      }
    });

    canvas.addEventListener("mouseup", () => {
      if (mode === "draw") drawing = false;
    });

    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // 텍스트 박스도 다 제거
      document.querySelectorAll(".text-box").forEach(box => box.remove());
    }

    function setMode(newMode) {
      mode = newMode;
    }

    // 텍스트 박스 생성
    function createTextBox(x, y) {
      const box = document.createElement("div");
      box.className = "text-box";
      box.style.left = `${x}px`;
      box.style.top = `${y}px`;
      box.style.width = "150px";
      box.style.height = "50px";

      const textarea = document.createElement("textarea");
      box.appendChild(textarea);
      wrapper.appendChild(box);
      makeDraggable(box);
      textarea.focus();
    }

    function makeDraggable(el) {
      let isDragging = false;
      let offsetX = 0;
      let offsetY = 0;

      el.addEventListener("mousedown", (e) => {
        if (e.target.tagName.toLowerCase() === "textarea") return;
        isDragging = true;
        offsetX = e.offsetX;
        offsetY = e.offsetY;
        el.style.zIndex = 1000;
      });

      document.addEventListener("mousemove", (e) => {
        if (isDragging) {
          el.style.left = `${e.pageX - wrapper.offsetLeft - offsetX}px`;
          el.style.top = `${e.pageY - wrapper.offsetTop - offsetY}px`;
        }
      });

      document.addEventListener("mouseup", () => {
        isDragging = false;
      });
    }

    function saveTextToCanvas() {
      const boxes = document.querySelectorAll(".text-box");
      boxes.forEach(box => {
        const textarea = box.querySelector("textarea");
        const text = textarea.value;
        const x = parseInt(box.style.left, 10);
        const y = parseInt(box.style.top, 10) + 16;

        ctx.font = "16px sans-serif";
        ctx.fillStyle = document.getElementById("colorPicker").value;
        text.split("\n").forEach((line, i) => {
          ctx.fillText(line, x, y + i * 20);
        });

        box.remove();
      });
    }
  </script>
</body>
</html>
